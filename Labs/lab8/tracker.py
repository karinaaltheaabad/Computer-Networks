"""
This file represents the tracker from a p2p
"""
class Tracker:

    def __init__(self, torrent, server, peer_id, dht_support=True):
        self.server = server
        self.peer_id = peer_id
        self.torrent = torrent
        self.dht_support = dht_support
        self.dht = {}


    def distributed_hash_table(self):
        """
        :return: the DHT table
        """
        return self.dht

    def add_peer_to_dht(self, peer_ip, port):
        """
        :param peer_ip:
        :param port:
        :return: VOID
        """
        hash_info = self.torrent.info_hash()
        peer = peer_ip + ":" + port
        self.dht[hash_info] = peer

    def add_peer_to_swarm(self, peer_id, peer_ip, peer_port):
        """
        When a peers connects to the network adds this peer
        to the list of peers connected
        :param peer_id:
        :param peer_ip:
        :param peer_port:
        :return:
        """
        self.server.swarm[peer_id] = (peer_ip, peer_port)
        self.broadcast(data=self.server.swarm)

    def remove_peer_from_swarm(self, peer_id):
        """
        Removes a peer from the swarm when it disconnects from the network
        Note: this method needs to handle exceptions when the peer disconnected abruptly without
              notifying the network (i.e internet connection dropped...)
        :param peer_id:
        :return:
        """
        if self.server.swarm[peer_id]:
            del self.server.swarm[peer_id]  # delete the peer from the peer addresses connected
            if self.server.connected[peer_id]:
                del self.server.connected[peer_id]  # disconnect the peer from this server
            self.broadcast(data=self.server.swarm)

    def broadcast(self, data):
        """
        Broadcast the list of connected peers to all the peers in the network.
        :return:
        """
        peers = self.server.connected
        for peer in peers:
            broadcast_data = {'id': 11, 'data': data}
            peer.send(broadcast_data)

    def set_total_uploaded(self, peer_id, total_uploaded):
        """
        Sets the total data uploaded so far by the peer passed as a parameter
        :param peer_id:
        :return: VOID
        """
        if self.server.swarm[peer_id]:
            self.server.connected[peer_id].set_total_uploaded(total_uploaded)

    def total_downloaded(self, peer_id, total_downloaded):
        """
        Sets the total data downloaded so far by the peer passed as a parameter
        :param peer_id:
        :return: VOID
        """
        if self.server.swarm[peer_id]:
            self.server.connected[peer_id].set_total_downloaded(total_downloaded)

    def info_hash_validated(self, info_hash):
        """
        Compare the info_hash generated by this peer with another info_hash sent by another peer
        this is done to make sure that both peers agree to share the same file.
        :param info_hash: the hash info sent by a different peer in the handshake message
        :return: True if the info_hashes are equal. Otherwise, returns false.
        """
        return self.torrent.validate_hash_info(info_hash)

    def run(self):
        print("Peer '" + str(self.peer_id) + "' Tracker running....")
